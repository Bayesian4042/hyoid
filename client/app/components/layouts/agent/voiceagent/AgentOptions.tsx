import { Button, Flex, Space } from 'antd'
import InputField from '~/components/ui/InputField'
import OpenModalButton from '~/components/ui/OpenModalButton'
import OptionSelector from '~/components/ui/OptionSelector'
import Slider from '~/components/ui/Slider'
import KnowledgeBaseDrawer from '../../drawer/KnowledgeBaseDrawer'
import ToolsDrawer from '../../drawer/ToolsDrawer'
import React, { useEffect, useState } from 'react'
import { updateAgent } from '~/common/apis/api.request'
import { IoWarningOutline } from "react-icons/io5";
import { Agent } from '~/types/agents'

import { Flag } from '~/types/common'

const AgentOptions = ({agentData}:{agentData:Agent}) => {



    const[isOpenKnowledgeBase,setIsOpenKnowledgeBase] = useState<boolean>(false)
    const[isOpenTools,setIsOpenTools] = useState<boolean>(false)

    const[firstMessage,setFirstMessage]=useState<string>(agentData?.firstMessage);
    const[systemPrompt,setSystemPrompt]=useState<string>(agentData?.systemPrompt);
    const[temperature,setTemperature]=useState<number>(agentData?.temperature);

    const[flag,setFlag]=useState<Flag>({
        "firstMessage":agentData?.firstMessage,
        "systemPrompt":agentData?.systemPrompt,
        "temperature":agentData?.temperature
    })
    
    const[updateValue,setUpdateValue]=useState<boolean>(false)
    const[loading,setLoading]=useState<boolean>(false)

    const handleUpdateAgent = async() => {
        setFlag({
        firstMessage,
        systemPrompt,
        temperature
        })
    setLoading(true)
    await updateAgent(agentData.id,firstMessage,systemPrompt,temperature);
    setLoading(false)
    }


    useEffect(() => {
        if (
            flag.firstMessage !== firstMessage ||
            flag.systemPrompt !== systemPrompt ||
            flag.temperature !== temperature
        ) {
            setUpdateValue(true);
        } else {
            setUpdateValue(false);
        }
    }, [firstMessage, systemPrompt, temperature,flag]);
    

    return (<div>
        <Space size='middle' direction="vertical" className='px-1 my-5 h-full'>

            <OptionSelector title='Agent Language' desc='Choose the language the agent will communicate in.' defaultValue='English' />

            <InputField value={firstMessage} setValue={setFirstMessage} title='First message' row={3} desc='The first message the agent will say. If empty, the agent will wait for the user to start the conversation.' />

            <InputField value={systemPrompt} setValue={setSystemPrompt} title='System prompt' row={4} desc='The system prompt is used to determine the persona of the agent and the context of the conversation.' />

            <OptionSelector title='LLM' desc='Select which provider and model to use for the LLM.Currently, the LLM cost is covered by us. In the future,' defaultValue='GPT-4o Mini' />
        
            <Slider value={temperature} setValue={setTemperature} title='Temperature' desc='Temperature is a parameter that controls the creativity or randomness of the responses generated by the LLM.'/>
       
            <OpenModalButton title='Knowledge base' desc='Provide the LLM with domain-specific information to help it answer questions more accurately.' button='Add item' setOpen={setIsOpenKnowledgeBase}/>
        
            <OpenModalButton title='Tools' desc='Provide the agent with tools it can use to help users.' button='Add tool' setOpen={setIsOpenTools}/>
            {
                updateValue && 
                <Flex
                justify='space-between'
                align='center'
                className="bg-white border border-gray-300 py-3 px-4 w-full rounded-lg"
            >
                <Flex gap='small'>
                    <IoWarningOutline size={21} />
                    <h1 className="text-sm font-medium">You have unsaved changes</h1>
                </Flex>
                <Button color="default" variant="solid" onClick={handleUpdateAgent} loading={loading}>
                    Save
                </Button>
            </Flex>
            }
        
        </Space>
    <KnowledgeBaseDrawer  agentId={agentData.id} open={isOpenKnowledgeBase} setOpen={setIsOpenKnowledgeBase}/>
    <ToolsDrawer open={isOpenTools} setOpen={setIsOpenTools}/>
    </div>
    )
}

export default AgentOptions